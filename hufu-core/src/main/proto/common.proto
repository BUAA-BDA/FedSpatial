syntax = "proto2";
package federate;

option java_package = "group.bda.federate.rpc";
option java_outer_classname = "FederateCommon";

message Point {
  required double latitude = 1;
  required double longitude = 2;
}

message IndexPoint {
  required int64 id = 1;
  required Point point = 2;
}

message FederateTableInfo {
  required string endpoint = 1;
  required string tableName = 2;
}

message IdMapEntry {
  required int64 sid = 1;
  repeated int64 ids = 2;
}

message FederateJoinDataSet {
  required bytes dataSet = 1;
  repeated IdMapEntry idMap = 2;
}

message FederateDataSet {
  repeated string results = 1;
  repeated bytes dataSet = 2;
}

message Box {
  required double lonMin = 1;
  required double latMin = 2;
  required double lonMax = 3;
  required double latMax = 4;
}

message HeaderProto {
  repeated string name = 1;
  repeated int32 type = 2;
  repeated int32 level = 3;
  required bool isPrivacyAgg = 4;
}

message RowsProto {
  repeated bytes row = 1;
}
// todo: RowsProto use RowFields
message DataSetProto {
  required HeaderProto header = 1;
  required RowsProto rows = 2;
  optional string uuid = 3;
}

message RowField {
  oneof field {
    string str = 1;
    bool b = 2;
    int32 i32 = 5;
    int64 i64 = 6;
    float f32 = 7;
    double f64 = 8;
    Point p = 9;
  }
}

message LiteralField {
  required int32 type = 1;
  required RowField value = 2;
}

enum Op {
  kAs = 1;
  kPlus = 2;
  kMinus = 3;
  kTimes = 4;
  kDivide = 5;
  kMod = 6;

  kGt = 11;
  kGe = 12;
  kLt = 13;
  kLe = 14;
  kEq = 15;
  kNe = 16;

  kAnd = 21;
  kOr = 22;
  kNot = 23;
  kXOr = 24;

  kScalarFunc = 101;
  kAggFunc = 102;
}

enum Func {
  kDWithin = 1;
  kDistance = 2;
  kPoint = 3;
  kX = 4;
  kY = 5;
  kKNN = 6;

  kCount = 101;
  kSum = 102;
  kAvg = 103;
  kMax = 104;
  kMin = 105;
}

message IRField {
  oneof field {
    LiteralField literal = 1;
    int32 ref = 2;
  }
  required int32 level = 3;
}

message IR {
  required Op op = 1;
  required int32 outType = 2;
  repeated IRField in = 3;
  // for function
  optional Func func = 4;
}

message Expression {
  repeated IR ir = 1;
  optional int32 level = 2 [default = 0];
}